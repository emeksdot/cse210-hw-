In software development, especially in the object-oriented paradigm - classes are used to model real world objects. These classes have characteristics or properties  and actions or behaviours that distinguish them from one another. An example of a class could be an account.
These properties and methods have access levels. Objects are instances of a class. Object-oriented programming or (OOP) enables the rapid development of large and complex software and it has four foundational principles or concepts that underlie this model. 
These principles are:
Encapsulation - the bundling together of data (called fields or member variables) that stores an object's state and the methods or member functions that manipulate the data to give the object its unique behaviour.
Abstraction - the hiding of unnecessary details of a software object to reduce its complexity and also to enable the interactions with the object in a well defined manner.
Inheritance - it enables reuse of functionality among objects, it can extend the capability of the object and reduces redundacy therby leading to cleaner code by establishing parent/child relationships where the child acquires the characteristics of the parent in addition to its own.
Polymorphism - allows for objects to take many forms for example a man can be a father, a son, a husband depending on the situation, and these objects can be interchanged for their parent classes and still work.
In the last project (Foundation 3 Project) that I did, I used all these principles when implementing my classes such as the Activity class which is the parent or base class that stored the common or shared behavior that was inherited by the Running, Biking and Swimming classes that are the children or subclasses. The method such as the GetSummary() I used in the base class were overridden in the child classes to show the polymorphic behavior ie it can be called  on any of the child classes in exactly the same way but what gets displayed to the Console is different. I also applied abstraction to my classes by hiding how the calculations for say GetDistance() was obtained, all you need to do is say obj1.GetDistance() and the correct implementation of the will be displayed. The data and methods were all encapsulated within the object and their visibilty was limited by virtue of using the private access levels, And the only way to get to the fields was only through the accessor and mutator methods. For example the GetDate() and SetDate(DateTime date) methods of the Activity class.